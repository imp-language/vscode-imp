---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: imp
scopeName: source.imp
fileTypes:
  - imp
patterns:
  - include: "#comments"
  - include: "#strings"
  - include: "#keywords"
  - include: "#operators"
  - include: "#numbers"
  - include: "#support"
  - include: "#variables"
repository:
  variables:
    patterns:
      - name: meta.function.declaration.imp
        patterns:
          - match: "\\b(func)\\s+([A-Z][a-zA-Z0-9]*)\\b"
            captures:
              "1":
                name: storage.type.function.imp
              "2":
                name: entity.name.type.imp
          - match: "\\b(func)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b"
            captures:
              "1":
                name: storage.type.function.imp
              "2":
                name: entity.name.function.imp
          - begin: \b(func|function)\s+@"
            end: '"'
            name: entity.name.function.imp
            beginCaptures:
              "1":
                name: storage.type.function.imp
            patterns:
              - include: "#stringcontent"
          - name: keyword.default.imp
            match: "\\b(mut|val|func)\\b"
      - name: meta.function.call.imp
        patterns:
          - match: "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()"
            name: entity.name.type.imp
          - match: "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()"
            name: entity.name.function.imp
      - name: meta.variable.imp
        patterns:
          - match: "\\b[_A-Z][_A-Z0-9]+\\b"
            name: variable.constant.imp
          - match: "\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b"
            name: entity.name.type.imp
          - match: "\\b[A-Z][a-zA-Z0-9]*\\b"
            name: entity.name.type.imp
          - match: "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
            name: variable.imp
          - begin: '@"'
            end: '"'
            name: variable.imp
            patterns:
              - include: "#stringcontent"
  keywords:
    patterns:
      - match: "\\b(while|for|loop)\\b"
        name: keyword.control.repeat.imp
      - name: keyword.control.import.imp
        match: "\\b(export|import|from|as)\\b"
      - name: keyword.structure.imp
        match: "\\b(struct|enum|union)\\b"
      - name: keyword.control.flow.imp
        match: "\\b(return)\\b"
      - name: keyword.control.async.imp
        match: "\\b(await|async)\\b"
      - name: keyword.control.trycatch.imp
        match: "\\b(try|catch)\\b"
      - name: keyword.control.conditional.imp
        match: "\\b(if|else|match)\\b"
      - name: keyword.constant.bool.imp
        match: "\\b(true|false)\\b"
      - match: "[\\s\\(\\[\\{](\\.[_a-zA-Z][_a-zA-Z0-9]*)(?!\\s*=[^>])(?![_a-zA-Z0-9])"
        captures:
          "1":
            name: variable.other.enummember.imp
      - match: '[\s\(\[\{](\.@"[^"]*")(?!\s*=[^>])'
        captures:
          "1":
            name: variable.other.enummember.imp
      - name: keyword.default.imp
        match: "\\b(usingnamespace|test|and|or)\\b"
      - name: meta.error-set.imp
        patterns:
          - begin: "\\b(error)\\b\\s*{"
            end: "}"
            beginCaptures:
              "1":
                name: keyword.type.imp
            patterns:
              - match: "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
                name: variable.constant.error.imp
              - include: "$self"
          - begin: "\\b(error)\\b"
            end: "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b"
            beginCaptures:
              "1":
                name: keyword.type.imp
            endCaptures:
              "1":
                name: variable.constant.error.imp
            patterns:
              - include: "$self"
      - name: keyword.type.imp
        match: "\\b(float|double|string)\\b"
      - name: keyword.type.integer.imp
        match: "\\b(int|bool)\\b"
  operators:
    patterns:
      - name: keyword.operator.comparison.imp
        match: "(\\b(and|or)\\b)|(==|!=)"
      - name: keyword.operator.arithmetic.imp
        match: "(-%?|\\+%?|\\*%?|/|%)=?"
      - name: keyword.operator.special.imp
        match: "(==|\\+\\+|\\*\\*|->)"
      - name: keyword.operator.new.imp
        match: "(new)"
  comments:
    patterns:
      - name: comment.line.double-slash.imp
        begin: "//"
        end: "$"
        patterns:
          - include: "#commentContents"
  commentContents:
    patterns:
      - match: "\\b(TODO|FIXME|XXX|NOTE)\\b:?"
        name: keyword.todo.imp
  strings:
    patterns:
      - name: string.quoted.double.imp
        begin: '"'
        end: '"'
        patterns:
          - include: "#stringcontent"
      - name: string.multiline.imp
        begin: "\\\\\\\\"
        end: "$"
      - name: string.quoted.single.imp
        match: "'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
  stringcontent:
    patterns:
      - name: constant.character.escape.imp
        match: \\([nrt'"\\]|(x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\}))
      - name: invalid.illegal.unrecognized-string-escape.imp
        match: "\\\\."
  numbers:
    patterns:
      - name: constant.numeric.float.imp
        match: "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
      - name: constant.numeric.double.imp
        match: "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?d\\b"
      - name: constant.numeric.decimal.imp
        match: "\\b[0-9][0-9_]*\\b"
  support:
    patterns:
      - comment: Built-in functions
        name: support.function.builtin.imp
        match: "@[_a-zA-Z][_a-zA-Z0-9]*"
